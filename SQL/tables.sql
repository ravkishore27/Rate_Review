call CreateTables();

DROP PROCEDURE IF EXISTS yelp.CreateTables;
DELIMITER //
CREATE PROCEDURE yelp.`CreateTables`()
BEGIN


#USER
CREATE TABLE USER(
    User_Id INT NOT NULL AUTO_INCREMENT,
    User_Type VARCHAR(30) NOT NULL,
    PRIMARY KEY (User_Id)
);


#UNREGISTERED_USER
CREATE TABLE UNREGISTERED_USER(
    Ur_Id INT NOT NULL,
    Activity VARCHAR(100),
    PRIMARY KEY(Ur_Id),
    FOREIGN KEY(Ur_Id) REFERENCES USER(User_Id) ON DELETE CASCADE ON      
    UPDATE CASCADE
);

#REGISTERED_USER
CREATE TABLE REGISTERED_USER(
    User_Id INT NOT NULL,
    Username VARCHAR(30) NOT NULL UNIQUE,
    Password VARCHAR(30) NOT NULL,
    Name VARCHAR(30),
    Email VARCHAR(30),
    Address VARCHAR(50),
    PRIMARY KEY(User_Id),
    FOREIGN KEY(User_ID) REFERENCES USER(User_Id) ON DELETE CASCADE ON 
    UPDATE CASCADE
 );

#ADMIN
CREATE TABLE ADMIN(
    Admin_Id INT NOT NULL AUTO_INCREMENT,
    Username VARCHAR(30) NOT NULL UNIQUE,
    Password VARCHAR(30) NOT NULL,
    Name VARCHAR(30),
    Email VARCHAR(30),
    PRIMARY KEY(Admin_Id),
    FOREIGN KEY(Admin_Id) REFERENCES USER(User_Id) ON DELETE CASCADE ON 
    UPDATE CASCADE
);

#FAVOURITES
CREATE TABLE FAVOURITES(
    Reg_User_Id INT NOT NULL,
    Favourites INT NOT NULL,
    PRIMARY KEY(Reg_User_Id,Favourites),
    FOREIGN KEY(Reg_User_Id) REFERENCES REGISTERED_USER(User_Id) ON  
    DELETE CASCADE ON UPDATE CASCADE
);    

#COMPLIMENT
CREATE TABLE COMPLIMENT(
   Reg_User_Id INT NOT NULL,
   Compliment_User_Id INT NOT NULL,
   Message VARCHAR(40),
   PRIMARY KEY(Reg_User_Id,Compliment_User_Id),
   FOREIGN KEY(Reg_User_Id) REFERENCES REGISTERED_USER(User_Id) ON 
   DELETE CASCADE ON UPDATE CASCADE,
   FOREIGN KEY(Compliment_User_Id) REFERENCES REGISTERED_USER(User_Id) ON 
   DELETE CASCADE ON UPDATE CASCADE
);

#COMPLIMENTED USER DETAILS
CREATE TABLE COMPLIMENTED_USER_DETAILS( 
Complimented_User_Id INT NOT NULL, 
Privacy ENUM('PUBLIC','PRIVATE') DEFAULT 'PUBLIC',
PRIMARY KEY(Complimented_User_Id),
FOREIGN KEY(Complimented_User_Id) REFERENCES COMPLIMENT(Compliment_User_Id)
);

#FRIENDSHIP
DROP TABLE IF EXISTS FRIENDSHIP;
CREATE TABLE FRIENDSHIP(
    User_Id INT NOT NULL,
    Friends_id INT NOT NULL,
    PRIMARY KEY(User_Id,Friends_Id),
    FOREIGN KEY(User_id) REFERENCES REGISTERED_USER(User_Id) ON DELETE 
    CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(Friends_Id) REFERENCES REGISTERED_USER(User_Id) ON DELETE 
    CASCADE ON UPDATE CASCADE
);

#CATEGORIES
CREATE TABLE CATEGORIES(
    Category_Id INT NOT NULL AUTO_INCREMENT,
    Category_Name VARCHAR(20) NOT NULL,
    Category_Type VARCHAR(20) NOT NULL,
    Address VARCHAR(50),
    Contact_Number VARCHAR(11),
    PRIMARY KEY(Category_Id)
);

#RESTAURANT
CREATE TABLE RESTAURANT(
    Restaurant_Id INT NOT NULL, 
    Cuisine VARCHAR(20),
    PRIMARY KEY(Restaurant_Id),
    FOREIGN KEY(Restaurant_Id) REFERENCES CATEGORIES(Category_Id) ON  
    DELETE CASCADE ON UPDATE CASCADE
);

#SHOPPING
CREATE TABLE SHOPPING(
    Shopping_Id INT NOT NULL,
    Working_Hrs VARCHAR(20),
    PRIMARY KEY(Shopping_Id),
    FOREIGN KEY(Shopping_Id ) REFERENCES CATEGORIES(Category_Id) ON  
    DELETE CASCADE ON UPDATE CASCADE
);

#HOTEL_TRAVEL
CREATE TABLE HOTEL_TRAVEL(
    Hotel_Travel_Id INT NOT NULL,
    Star INT(1),
    PRIMARY KEY(Hotel_Travel_Id),
    FOREIGN KEY(Hotel_Travel_Id) REFERENCES CATEGORIES(Category_Id) ON  
    DELETE CASCADE ON UPDATE CASCADE
);

#REVIEW
CREATE TABLE REVIEW(
    Review_Id INT NOT NULL AUTO_INCREMENT,
    Review TEXT NOT NULL,
    PRIMARY KEY(Review_Id)
);
#RATE
CREATE TABLE RATE(
    Rate_Id INT NOT NULL AUTO_INCREMENT,
    Rate INT(1) NOT NULL,
    Review_Id INT NOT NULL UNIQUE,
    Date_Time DATE,
    Reg_Id INT,
    Category_Id INT,
    PRIMARY KEY(Rate_Id), 
    FOREIGN KEY(Reg_Id) REFERENCES REGISTERED_USER(User_Id) ON DELETE 
    SET NULL ON UPDATE CASCADE,
    FOREIGN KEY(Category_Id) REFERENCES CATEGORIES(Category_Id) ON DELETE   
    CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(Review_Id) REFERENCES REVIEW(Review_Id) ON DELETE CASCADE ON UPDATE CASCADE
);

#PICTURE
CREATE TABLE PICTURE(
    Picture_Id INT NOT NULL AUTO_INCREMENT,
    Image varchar(30) NOT NULL,
    Reg_User_Id INT,
    Category_Id INT,
    PRIMARY KEY(Picture_Id),
    FOREIGN KEY( Reg_User_Id) REFERENCES REGISTERED_USER(User_Id) ON  
    DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY(Category_Id) REFERENCES CATEGORIES(Category_Id) ON DELETE  
    CASCADE ON UPDATE CASCADE
);

#PROMOTION
CREATE TABLE PROMOTION(
    Promo_Id INT NOT NULL AUTO_INCREMENT,
    Promo_Message VARCHAR(30) NOT NULL,
    Expiration_Date DATE NOT NULL,
    Admin_Id INT,
    Category_Id INT,
    PRIMARY KEY(Promo_Id),
    FOREIGN KEY(Admin_Id) REFERENCES ADMIN(Admin_Id) ON DELETE CASCADE   
    ON UPDATE CASCADE,
    FOREIGN KEY(Category_Id) REFERENCES CATEGORIES(Category_Id)
);

#CHECKIN
CREATE TABLE CHECKIN(
   Reg_User_Id INT NOT NULL,
   Category_Id INT NOT NULL,
   Date_Time DATETIME NOT NULL,
PRIMARY KEY(Reg_User_Id, Category_id, Date_Time),
   FOREIGN KEY(Reg_User_Id) REFERENCES REGISTERED_USER(User_Id) ON    
   DELETE CASCADE ON UPDATE CASCADE,
   FOREIGN KEY(Category_Id) REFERENCES CATEGORIES(Category_Id) ON DELETE 
   CASCADE ON UPDATE CASCADE
);

END; //
DELIMITER ;